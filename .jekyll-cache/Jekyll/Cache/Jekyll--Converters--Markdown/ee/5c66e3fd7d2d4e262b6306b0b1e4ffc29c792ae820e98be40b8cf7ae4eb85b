I"¡/<h2 id="introduction">Introduction</h2>

<p>The Deville systematic design is a sampling design developed in 1998 by Jean-Claude Deville. The method has similarities with the systematic design but has different properties. <a class="citation" href="#cha:12">(Chauvet, 2012)</a> has shown that Deville systematic and ordered pivotal method are in fact the same underlying sampling design. This vignette shows how to use the functions <code class="language-plaintext highlighter-rouge">sys_deville</code> and <code class="language-plaintext highlighter-rouge">sys_devillepi2</code>. A small simulation is also computed to see that the second order inclusion probabilities are effectively the same as the function <code class="language-plaintext highlighter-rouge">spm</code> of the package BalancedSampling that compute the ordered pivotal method.</p>

<h2 id="generate-data">Generate data</h2>

<p>Inclusion probabilities are generated unequal and proportional to a random uniform variable.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">sampling</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">StratifiedSampling</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">BalancedSampling</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">set.seed</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">N</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">20</span><span class="w">
</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">3</span><span class="w">
</span><span class="n">pik</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">inclusionprobabilities</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="n">N</span><span class="p">),</span><span class="n">n</span><span class="p">)</span></code></pre></figure>

<h2 id="simulations">Simulations</h2>

<p>To see if the function indeed computes the correct second-order inclusion probabilities, we perform a large number of simulations to estimate the second-order inclusion probability matrix.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">SIM</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">100000</span><span class="w">
</span><span class="n">PI_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w">  </span><span class="n">PI_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w">  </span><span class="n">matrix</span><span class="p">(</span><span class="nf">rep</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="n">N</span><span class="o">*</span><span class="n">N</span><span class="p">),</span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">N</span><span class="p">,</span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">N</span><span class="p">)</span><span class="w">

</span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">SIM</span><span class="p">){</span><span class="w">
  
  </span><span class="n">s1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">BalancedSampling</span><span class="o">::</span><span class="n">spm</span><span class="p">(</span><span class="n">pik</span><span class="p">)</span><span class="w">
  </span><span class="n">s1_01</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="n">N</span><span class="p">)</span><span class="w">
  </span><span class="n">s1_01</span><span class="p">[</span><span class="n">s1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">
  
  </span><span class="n">s2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sys_deville</span><span class="p">(</span><span class="n">pik</span><span class="p">)</span><span class="w">
  </span><span class="n">s2_01</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="n">N</span><span class="p">)</span><span class="w">
  </span><span class="n">s2_01</span><span class="p">[</span><span class="n">s2</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">
  </span><span class="n">PI_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">PI_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">s1_01</span><span class="o">%*%</span><span class="n">t</span><span class="p">(</span><span class="n">s1_01</span><span class="p">)</span><span class="w">
  </span><span class="n">PI_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">PI_2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">s2_01</span><span class="o">%*%</span><span class="n">t</span><span class="p">(</span><span class="n">s2_01</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">

</span><span class="n">PI_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">PI_1</span><span class="o">/</span><span class="n">SIM</span><span class="w">
</span><span class="n">PI_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">PI_2</span><span class="o">/</span><span class="n">SIM</span></code></pre></figure>

<h2 id="exact-matrix-of-second-order-inclusion">Exact matrix of second order inclusion</h2>
<p>The function <code class="language-plaintext highlighter-rouge">sys_devillepi2</code> computes the exact second order inclusion probabilities.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">PI</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sys_devillepi2</span><span class="p">(</span><span class="n">pik</span><span class="p">)</span><span class="w"> </span><span class="c1"># compute the second order inclusion probabilities</span></code></pre></figure>

<h2 id="results">Results</h2>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">PI_1_sp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">as.matrix</span><span class="p">(</span><span class="n">PI_1</span><span class="p">),</span><span class="s2">"sparseMatrix"</span><span class="p">)</span><span class="w">
</span><span class="n">PI_2_sp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">as.matrix</span><span class="p">(</span><span class="n">PI_2</span><span class="p">),</span><span class="s2">"sparseMatrix"</span><span class="p">)</span><span class="w">
</span><span class="n">PI_sp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">as.matrix</span><span class="p">(</span><span class="n">PI</span><span class="p">),</span><span class="s2">"sparseMatrix"</span><span class="p">)</span><span class="w">

</span><span class="n">image</span><span class="p">(</span><span class="n">PI_1_sp</span><span class="p">)</span></code></pre></figure>

<p><img src="/figs/sysDev/unnamed-chunk-4-1.png" alt="center" /></p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">image</span><span class="p">(</span><span class="n">PI_2_sp</span><span class="p">)</span></code></pre></figure>

<p><img src="/figs/sysDev/unnamed-chunk-4-2.png" alt="center" /></p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">image</span><span class="p">(</span><span class="n">PI_sp</span><span class="p">)</span></code></pre></figure>

<p><img src="/figs/sysDev/unnamed-chunk-4-3.png" alt="center" /></p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># proportional test, these values should be approximately to 0.95</span><span class="w">
</span><span class="nf">length</span><span class="p">(</span><span class="w"> </span><span class="n">which</span><span class="p">(</span><span class="nf">abs</span><span class="p">((</span><span class="n">PI_1_sp</span><span class="o">@</span><span class="n">x</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">PI_sp</span><span class="o">@</span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">PI_sp</span><span class="o">@</span><span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="m">1</span><span class="o">-</span><span class="n">PI_sp</span><span class="o">@</span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="n">SIM</span><span class="p">))</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="m">1.96</span><span class="p">))</span><span class="o">/</span><span class="nf">length</span><span class="p">(</span><span class="n">PI_sp</span><span class="o">@</span><span class="n">x</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">#&gt; [1] 0.961039</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">length</span><span class="p">(</span><span class="w"> </span><span class="n">which</span><span class="p">(</span><span class="nf">abs</span><span class="p">((</span><span class="n">PI_2_sp</span><span class="o">@</span><span class="n">x</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">PI_sp</span><span class="o">@</span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">PI_sp</span><span class="o">@</span><span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="m">1</span><span class="o">-</span><span class="n">PI_sp</span><span class="o">@</span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="n">SIM</span><span class="p">))</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="m">1.96</span><span class="p">))</span><span class="o">/</span><span class="nf">length</span><span class="p">(</span><span class="n">PI_sp</span><span class="o">@</span><span class="n">x</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">#&gt; [1] 0.9448052</code></pre></figure>

<h2 id="references">References</h2>

<ol class="bibliography"><li><span id="cha:12">Chauvet, G. (2012). On a characterization of ordered pivotal sampling. <i>Bernoulli</i>, <i>18</i>(4), 1320â1340.</span></li></ol>
:ET